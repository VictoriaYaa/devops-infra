name: 'terraform-plan-infra'

on:
  push:
    branches:
    - eks_branch
    - alb_branch

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Process for Branches'
    runs-on: ubuntu-latest
    

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Check AWS credentials 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    
    # Validate the configuration files
    - name: Terraform Validate
      run: terraform validate

    - name: Validate failed
      if: ${{ failure() && steps.validate.outputs.failure-reason == 'validate-failed' }}
      run: echo "terraform validate failed"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan 

    # Install kubectl
    - name: Install Kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.21.3'
      id: install
        
    - name: Update Kube Config
      run: aws eks update-kubeconfig --name NEW-vic-eks --region us-east-1

    - name: Check the Kubectl Output
      run: |
        echo "kubectl get namespace"
        kubectl get namespace
    

        kubectl apply \
            --validate=false \
            -f https://github.com/jetstack/cert-manager/releases/download/v1.5.4/cert-manager.yaml

        curl -Lo v2_4_1_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.4.1/v2_4_1_full.yaml
        sed -i.bak -e 's|your-cluster-name|NEW-vic-eks|' ./v2_4_1_full.yaml

        echo "kubectl get all -n default"
        kubectl get all -n default

        echo "kubectl get all -n kube-system"
        kubectl get all -n kube-system

        echo "kubectl get pods --namespace cert-manager"
        kubectl get pods --namespace cert-manager

        echo "kubectl get all -n cert-manager"
        kubectl get all -n cert-manager

        echo "kubectl get svc"
        kubectl get svc
        
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.9/docs/examples/rbac-role.yaml

        echo "kubectl get ingress"
        kubectl get ingress

        echo "kubectl get deployments --all-namespaces"
        kubectl get deployments --all-namespaces

        kubectl delete deployment.apps/vic-alb-ingress
        kubectl delete deployment.apps/aws-lb-controller

        echo "kubectl describe svc aws-load-balancer-webhook-service -n kube-system"
        kubectl describe svc aws-load-balancer-webhook-service -n kube-system

        echo "kubectl apply -f deployment.yaml"
        kubectl apply -f kube-service.yaml
        # kubectl apply -f deployment.yaml
        kubectl get po -n cert-manager
        # kubectl apply -f v2_4_1_full.yaml
        # kubectl apply -f ingress.yml

        echo "kubectl get ingress"
        kubectl get ingress




        